boxplot(df.rmse[,c(1:9)+18],outline=F,ylab="RMSE",xlab="Model Number",names=rep("",9))
abline(v=c(1:8)*3+0.5,lty=2,col="gray")
a=c()
for(i in 1:nrow(rmse_mat)) a[i] = rmse_mat[i,min.ind[i]]
plot(apply(rmse_mat,2,mean))
points(lam.min,mean(rmse_mat[,lam.min]),col="red")
abline(h=mean(rmse_mat[,lam.min]),col="red",lty=2)
abline(h=mean(a),col="blue",lty=2)
par(mfrow=c(1,1))
df.rmse=data.frame(rmse_mat[,c(1,8,57,449,64,456,505,512)],rmse_mat[,lam.min],a)
boxplot(df.rmse)
abline(v=1.5,lty=2)
abline(v=4.5,lty=2)
abline(v=7.5,lty=2)
abline(v=8.5,lty=2)
b=c()
for(i in 1:nrow(hdist_mat)) b[i] = hdist_mat[i,min.ind[i]]
plot(apply(hdist_mat,2,mean))
points(lam.min,mean(hdist_mat[,lam.min]),col="red")
abline(h=mean(hdist_mat[,lam.min]),col="red",lty=2)
abline(h=mean(b),col="blue",lty=2)
rmse_mean = apply(rmse_mat,2,mean)
# kappa를 고정했을 때 sigma에 따른 mu의 변화 - 뚜렷함
col_sc =c("red","orange","yellow","green","skyblue","blue","purple","pink")
par(mfrow=c(2,4))
for (j in 1:8){
plot(rmse_mean[c(1:8)],type="n",ylim=c(1,4),col="gray",main=paste("kappa=",lam_set[j]),xlab="mu")
for (i in 1:8){
lines(rmse_mean[64*(j-1)+c(1:8)+8*(i-1)],type="l",col=col_sc[i])
}
}
# sigma를 고정했을 때 kappa에 따른 mu의 변화 - 뚜렷하지 않음
col_sc =c("red","orange","yellow","green","skyblue","blue","purple","pink")
par(mfrow=c(2,4))
for (j in 1:8){
plot(rmse_mean[c(1:8)],type="n",ylim=c(1,4),col="gray",main=paste("sigma=",lam_set[j]),xlab="mu")
for (i in 1:8){
lines(rmse_mean[64*(i-1)+c(1:8)+8*(j-1)],type="l",col=col_sc[i])
}
}
# mu를 고정했을 때 kappa에 따른 sigma의 변화 - 뚜렷하지않음
col_sc =c("red","orange","yellow","green","skyblue","blue","purple","pink")
par(mfrow=c(2,4))
for (j in 1:8){
plot(rmse_mean[c(1:8)],type="n",ylim=c(1,4),col="gray",main=paste("kappa=",lam_set[j]),xlab="sigma")
for (i in 1:8){
lines(rmse_mean[64*(i-1)+c(1:8)*8-7 +(j-1)],type="l",col=col_sc[i])
}
}
# kappa를 고정했을 때 mu에 따른 sigma의 변화 - 뚜렷함
col_sc =c("red","orange","yellow","green","skyblue","blue","purple","pink")
par(mfrow=c(2,4))
for (j in 1:8){
plot(rmse_mean[c(1:8)],type="n",ylim=c(1,4),col="gray",main=paste("mu=",lam_set[j]),xlab="sigma")
for (i in 1:8){
lines(rmse_mean[64*(j-1)+c(1:8)*8-7 +(i-1) ],type="l",col=col_sc[i])
}
}
# mu를 고정했을 때 sigma에 따른 kappa의 변화- sigma=100일때 뚜렷함
col_sc =c("red","orange","yellow","green","skyblue","blue","purple","pink")
par(mfrow=c(2,4))
for (j in 1:8){
plot(rmse_mean[c(1:8)],type="n",ylim=c(1,4),col="gray",main=paste("sigma=",lam_set[j]),xlab="kappa")
for (i in 1:8){
lines(rmse_mean[8*(i-1)+ c(1:8)*64-63 +(j-1) ],type="l",col=col_sc[i])
}
}
# sigma를 고정했을 때 mu에 따른 kappa의 변화 - sigma = 0 일때 뚜렷함
col_sc =c("red","orange","yellow","green","skyblue","blue","purple","pink")
par(mfrow=c(2,4))
for (j in 1:8){
plot(rmse_mean[c(1:8)],type="n",ylim=c(1,4),col="gray",main=paste("mu=",lam_set[j]),xlab="kappa")
for (i in 1:8){
lines(rmse_mean[8*(j-1)+ c(1:8)*64-63 +(i-1)],type="l",col=col_sc[i])
}
}
rm(list=ls())
setwd("~/GITHUB/gev")
source("./lib/sgev3library.R")
source("./lib/pack.R")
library(distrEx)
library(RobExtremes)
S_num = 10
eval(parse(text = paste0("load(file =","'", paste0('./Rexport/RData_sgev3_simulation/AIC_scenario',S_num, '.RData',"')"))))
min.ind =  unlist(lapply(AIC_list,function(x) which.min(x)))
# true paramter
loc = mu_set[,S_map[S_num,]$Var1]
sc =  sc_set[,S_map[S_num,]$Var2]
sh =  sh_set[,S_map[S_num,]$Var3]
rmse_list = list()
hdist_list = list()
for (i in 1:length(result)){
rmse_vec = c()
hdist_vec = c()
for (l in 1:length(result[[1]])){
tvec=result[[i]][[l]]
loc.vec.reg = tvec[3+(1:p)]
sc.vec.reg = tvec[(3+p)+(1:p)]
sh.vec.reg = tvec[(3+2*p)+(1:p)]
loc.vec = tvec[1] + drop(Z%*%loc.vec.reg)
sc.vec = exp(tvec[2] + drop(Z%*%sc.vec.reg))
sh.vec = tvec[3] + drop(Z%*%sh.vec.reg)
h_dist = 0
for (s in 1:ns){
x = GEV(loc=loc[s],scale=sc[s],shape=sh[s]) # RobExtremes
y = GEV(loc=loc.vec[s],scale=sc.vec[s],shape=sh.vec[s])
h_dist = h_dist + HellingerDist(x,y,smooth) # distrEx
}
rmse_vec[l] = base::norm(c(loc,sc,sh)-c(loc.vec,sc.vec,sh.vec), "2")/sqrt(3*ns)
hdist_vec[l] = h_dist
}
rmse_list[[i]] = rmse_vec
hdist_list[[i]] = hdist_vec
cat(i," ")
}
rmse_mat = do.call('rbind',rmse_list)
hdist_mat = do.call('rbind',hdist_list)
eval(parse(text = paste0("save.image(file =","'", paste0('./Rexport/RData_sgev3_simulation/testloss_scenario',S_num, '.RData',"')"))))
S_map
S_map2
rm(list=ls())
setwd("~/GITHUB/gev")
source("./lib/sgev3library.R")
source("./lib/pack.R")
library(distrEx)
library(RobExtremes)
S_num = 12
eval(parse(text = paste0("load(file =","'", paste0('./Rexport/RData_sgev3_simulation/AIC_scenario',S_num, '.RData',"')"))))
min.ind =  unlist(lapply(AIC_list,function(x) which.min(x)))
# true paramter
loc = mu_set[,S_map[S_num,]$Var1]
sc =  sc_set[,S_map[S_num,]$Var2]
sh =  sh_set[,S_map[S_num,]$Var3]
rmse_list = list()
hdist_list = list()
for (i in 1:length(result)){
rmse_vec = c()
hdist_vec = c()
for (l in 1:length(result[[1]])){
tvec=result[[i]][[l]]
loc.vec.reg = tvec[3+(1:p)]
sc.vec.reg = tvec[(3+p)+(1:p)]
sh.vec.reg = tvec[(3+2*p)+(1:p)]
loc.vec = tvec[1] + drop(Z%*%loc.vec.reg)
sc.vec = exp(tvec[2] + drop(Z%*%sc.vec.reg))
sh.vec = tvec[3] + drop(Z%*%sh.vec.reg)
h_dist = 0
for (s in 1:ns){
x = GEV(loc=loc[s],scale=sc[s],shape=sh[s]) # RobExtremes
y = GEV(loc=loc.vec[s],scale=sc.vec[s],shape=sh.vec[s])
h_dist = h_dist + HellingerDist(x,y,smooth) # distrEx
}
rmse_vec[l] = base::norm(c(loc,sc,sh)-c(loc.vec,sc.vec,sh.vec), "2")/sqrt(3*ns)
hdist_vec[l] = h_dist
}
rmse_list[[i]] = rmse_vec
hdist_list[[i]] = hdist_vec
cat(i," ")
}
rmse_mat = do.call('rbind',rmse_list)
hdist_mat = do.call('rbind',hdist_list)
eval(parse(text = paste0("save.image(file =","'", paste0('./Rexport/RData_sgev3_simulation/testloss_scenario',S_num, '.RData',"')"))))
S_num = 26
eval(parse(text = paste0("load(file =","'", paste0('./Rexport/RData_sgev3_simulation/result_scenario',S_num, '.RData',"')"))))
p=length(zlist[[1]])
df.tps = c()
for (i in 1:length(lam_set)){
lam_s = lam_set[i]
Hatmat= Z%*%solve(t(Z)%*%Z +lam_s*Om+diag(1e-08,nrow(Om)))%*%t(Z)
df.tps[i] =  sum(diag(Hatmat))
}
DF = rowSums(as.matrix(expand.grid( df.tps, df.tps, df.tps)))
nll_list = list()
for (i in 1:length(result)){
set.seed(i)
xlist = list()
for (s in 1:ns){
xlist[[s]] = rgev(n,loc=loc[s], scale=sc[s], shape=sh[s])
}
nll = c()
for (l in 1:length(result[[1]])){
tvec=result[[i]][[l]]
loc.vec.reg = tvec[3+(1:p)]
sc.vec.reg = tvec[(3+p)+(1:p)]
sh.vec.reg = tvec[(3+2*p)+(1:p)]
loc.vec = tvec[1] + drop(Z%*%loc.vec.reg)
sc.vec = exp(tvec[2] + drop(Z%*%sc.vec.reg))
sh.vec = tvec[3] + drop(Z%*%sh.vec.reg)
ll = 0
for (s in 1:length(xlist)){
ll = ll - sum(dgev(x=xlist[[s]],loc=loc.vec[s],scale=sc.vec[s],shape=sh.vec[s], log=TRUE))
}
nll[l] = ll
}
nll_list[[i]] = nll
}
AIC_list = lapply(nll_list,function(x) 2*x+2*DF)
lam.grid2 = expand.grid(lam_set,lam_set,lam_set)
lam.min.table = table(unlist(lapply(AIC_list,function(x) which.min(x))))
lam.min.vec = as.numeric(rownames(lam.min.table))
lam.grid2[lam.min.vec,] # 선택된 lambda 범위
eval(parse(text = paste0("save.image(file =","'", paste0('./Rexport/RData_sgev3_simulation/AIC_scenario',S_num, '.RData',"')"))))
rm(list=ls())
setwd("~/GITHUB/gev")
source("./lib/sgev3library.R")
source("./lib/pack.R")
library(distrEx)
library(RobExtremes)
S_num = 26
eval(parse(text = paste0("load(file =","'", paste0('./Rexport/RData_sgev3_simulation/AIC_scenario',S_num, '.RData',"')"))))
min.ind =  unlist(lapply(AIC_list,function(x) which.min(x)))
# true paramter
loc = mu_set[,S_map[S_num,]$Var1]
sc =  sc_set[,S_map[S_num,]$Var2]
sh =  sh_set[,S_map[S_num,]$Var3]
rmse_list = list()
hdist_list = list()
for (i in 1:length(result)){
rmse_vec = c()
hdist_vec = c()
for (l in 1:length(result[[1]])){
tvec=result[[i]][[l]]
loc.vec.reg = tvec[3+(1:p)]
sc.vec.reg = tvec[(3+p)+(1:p)]
sh.vec.reg = tvec[(3+2*p)+(1:p)]
loc.vec = tvec[1] + drop(Z%*%loc.vec.reg)
sc.vec = exp(tvec[2] + drop(Z%*%sc.vec.reg))
sh.vec = tvec[3] + drop(Z%*%sh.vec.reg)
h_dist = 0
for (s in 1:ns){
x = GEV(loc=loc[s],scale=sc[s],shape=sh[s]) # RobExtremes
y = GEV(loc=loc.vec[s],scale=sc.vec[s],shape=sh.vec[s])
h_dist = h_dist + HellingerDist(x,y,smooth) # distrEx
}
rmse_vec[l] = base::norm(c(loc,sc,sh)-c(loc.vec,sc.vec,sh.vec), "2")/sqrt(3*ns)
hdist_vec[l] = h_dist
}
rmse_list[[i]] = rmse_vec
hdist_list[[i]] = hdist_vec
cat(i," ")
}
rmse_mat = do.call('rbind',rmse_list)
hdist_mat = do.call('rbind',hdist_list)
eval(parse(text = paste0("save.image(file =","'", paste0('./Rexport/RData_sgev3_simulation/testloss_scenario',S_num, '.RData',"')"))))
rm(list=ls())
setwd("~/GITHUB/gev")
source("./lib/sgev3library.R")
source("./lib/pack.R")
library(distrEx)
library(RobExtremes)
S_num = 19
eval(parse(text = paste0("load(file =","'", paste0('./Rexport/RData_sgev3_simulation/AIC_scenario',S_num, '.RData',"')"))))
min.ind =  unlist(lapply(AIC_list,function(x) which.min(x)))
# true paramter
loc = mu_set[,S_map[S_num,]$Var1]
sc =  sc_set[,S_map[S_num,]$Var2]
sh =  sh_set[,S_map[S_num,]$Var3]
Sys.time()
rmse_list = list()
hdist_list = list()
for (i in 1:length(result)){
rmse_vec = c()
hdist_vec = c()
for (l in 1:length(result[[1]])){
tvec=result[[i]][[l]]
loc.vec.reg = tvec[3+(1:p)]
sc.vec.reg = tvec[(3+p)+(1:p)]
sh.vec.reg = tvec[(3+2*p)+(1:p)]
loc.vec = tvec[1] + drop(Z%*%loc.vec.reg)
sc.vec = exp(tvec[2] + drop(Z%*%sc.vec.reg))
sh.vec = tvec[3] + drop(Z%*%sh.vec.reg)
h_dist = 0
for (s in 1:ns){
x = GEV(loc=loc[s],scale=sc[s],shape=sh[s]) # RobExtremes
y = GEV(loc=loc.vec[s],scale=sc.vec[s],shape=sh.vec[s])
h_dist = h_dist + HellingerDist(x,y,smooth) # distrEx
}
rmse_vec[l] = base::norm(c(loc,sc,sh)-c(loc.vec,sc.vec,sh.vec), "2")/sqrt(3*ns)
hdist_vec[l] = h_dist
}
rmse_list[[i]] = rmse_vec
hdist_list[[i]] = hdist_vec
cat(i," ")
}
rmse_mat = do.call('rbind',rmse_list)
hdist_mat = do.call('rbind',hdist_list)
eval(parse(text = paste0("save.image(file =","'", paste0('./Rexport/RData_sgev3_simulation/testloss_scenario',S_num, '.RData',"')"))))
S_num = 27
eval(parse(text = paste0("load(file =","'", paste0('./Rexport/RData_sgev3_simulation/result_scenario',S_num, '.RData',"')"))))
p=length(zlist[[1]])
df.tps = c()
for (i in 1:length(lam_set)){
lam_s = lam_set[i]
Hatmat= Z%*%solve(t(Z)%*%Z +lam_s*Om+diag(1e-08,nrow(Om)))%*%t(Z)
df.tps[i] =  sum(diag(Hatmat))
}
DF = rowSums(as.matrix(expand.grid( df.tps, df.tps, df.tps)))
nll_list = list()
for (i in 1:length(result)){
set.seed(i)
xlist = list()
for (s in 1:ns){
xlist[[s]] = rgev(n,loc=loc[s], scale=sc[s], shape=sh[s])
}
nll = c()
for (l in 1:length(result[[1]])){
tvec=result[[i]][[l]]
loc.vec.reg = tvec[3+(1:p)]
sc.vec.reg = tvec[(3+p)+(1:p)]
sh.vec.reg = tvec[(3+2*p)+(1:p)]
loc.vec = tvec[1] + drop(Z%*%loc.vec.reg)
sc.vec = exp(tvec[2] + drop(Z%*%sc.vec.reg))
sh.vec = tvec[3] + drop(Z%*%sh.vec.reg)
ll = 0
for (s in 1:length(xlist)){
ll = ll - sum(dgev(x=xlist[[s]],loc=loc.vec[s],scale=sc.vec[s],shape=sh.vec[s], log=TRUE))
}
nll[l] = ll
}
nll_list[[i]] = nll
}
AIC_list = lapply(nll_list,function(x) 2*x+2*DF)
lam.grid2 = expand.grid(lam_set,lam_set,lam_set)
lam.min.table = table(unlist(lapply(AIC_list,function(x) which.min(x))))
lam.min.vec = as.numeric(rownames(lam.min.table))
lam.grid2[lam.min.vec,] # 선택된 lambda 범위
eval(parse(text = paste0("save.image(file =","'", paste0('./Rexport/RData_sgev3_simulation/AIC_scenario',S_num, '.RData',"')"))))
warnings()
rm(list=ls())
setwd("~/GITHUB/gev")
source("./lib/sgev3library.R")
source("./lib/pack.R")
S_num = 1
eval(parse(text = paste0("load(file =","'", paste0('./Rexport/RData_sgev3_simulation/result_scenario',S_num, '.RData',"')"))))
p=length(zlist[[1]])
df.1 = c()
df.2 = c()
df.3 = c()
for (i in 1:length(lam_set1)){
lam_s1 = lam_set1[i] ; lam_s2 = lam_set2[i] ; lam_s3 = lam_set3[i]
Hatmat1 = Z%*%solve(t(Z)%*%Z +lam_s1*Om+diag(1e-08,nrow(Om)))%*%t(Z)
Hatmat2 = Z%*%solve(t(Z)%*%Z +lam_s2*Om+diag(1e-08,nrow(Om)))%*%t(Z)
Hatmat3 = Z%*%solve(t(Z)%*%Z +lam_s3*Om+diag(1e-08,nrow(Om)))%*%t(Z)
df.1[i] =  sum(diag(Hatmat1))
df.2[i] =  sum(diag(Hatmat2))
df.3[i] =  sum(diag(Hatmat3))
}
DF = rowSums(as.matrix(expand.grid( df.1, df.2, df.3)))
nll_list = list()
for (i in 1:length(result)){
set.seed(i)
xlist = list()
for (s in 1:ns){
xlist[[s]] = rgev(n,loc=loc[s], scale=sc[s], shape=sh[s])
}
nll = c()
for (l in 1:length(result[[1]])){
tvec=result[[i]][[l]]
loc.vec.reg = tvec[3+(1:p)]
sc.vec.reg = tvec[(3+p)+(1:p)]
sh.vec.reg = tvec[(3+2*p)+(1:p)]
loc.vec = tvec[1] + drop(Z%*%loc.vec.reg)
sc.vec = exp(tvec[2] + drop(Z%*%sc.vec.reg))
sh.vec = tvec[3] + drop(Z%*%sh.vec.reg)
ll = 0
for (s in 1:length(xlist)){
ll = ll - sum(dgev(x=xlist[[s]],loc=loc.vec[s],scale=sc.vec[s],shape=sh.vec[s], log=TRUE))
}
nll[l] = ll
}
nll_list[[i]] = nll
}
AIC_list = lapply(nll_list,function(x) 2*x+2*DF)
lam.grid2 = expand.grid(lam_set1,lam_set2,lam_set3)
lam.min.table = table(unlist(lapply(AIC_list,function(x) which.min(x))))
lam.min.vec = as.numeric(rownames(lam.min.table))
lam.grid2[lam.min.vec,] # 선택된 lambda 범위
eval(parse(text = paste0("save.image(file =","'", paste0('./Rexport/RData_sgev3_simulation/AIC_scenario',S_num, '.RData',"')"))))
rm(list=ls())
setwd("~/GITHUB/gev")
source("./lib/sgev3library.R")
source("./lib/pack.R")
library(distrEx)
library(RobExtremes)
S_num=10
eval(parse(text = paste0("load(file =","'", paste0('./Rexport/RData_sgev3_simulation/AIC_scenario',S_num, '.RData',"')"))))
# true paramter
loc = mu_set[,S_map[S_num,]$Var1]
sc =  sc_set[,S_map[S_num,]$Var2]
sh =  sh_set[,S_map[S_num,]$Var3]
Sys.time()
rmse_list = list()
hdist_list = list()
for (i in 1:length(result)){
rmse_vec = c()
hdist_vec = c()
for (l in 1:length(result[[1]])){
tvec=result[[i]][[l]]
loc.vec.reg = tvec[3+(1:p)]
sc.vec.reg = tvec[(3+p)+(1:p)]
sh.vec.reg = tvec[(3+2*p)+(1:p)]
loc.vec = tvec[1] + drop(Z%*%loc.vec.reg)
sc.vec = exp(tvec[2] + drop(Z%*%sc.vec.reg))
sh.vec = tvec[3] + drop(Z%*%sh.vec.reg)
h_dist = 0
for (s in 1:ns){
x = GEV(loc=loc[s],scale=sc[s],shape=sh[s]) # RobExtremes
y = GEV(loc=loc.vec[s],scale=sc.vec[s],shape=sh.vec[s])
h_dist = h_dist + HellingerDist(x,y,smooth) # distrEx
}
rmse_vec[l] = base::norm(c(loc,sc,sh)-c(loc.vec,sc.vec,sh.vec), "2")/sqrt(3*ns)
hdist_vec[l] = h_dist
}
rmse_list[[i]] = rmse_vec
hdist_list[[i]] = hdist_vec
cat(i," ")
}
rmse_mat = do.call('rbind',rmse_list)
hdist_mat = do.call('rbind',hdist_list)
eval(parse(text = paste0("save.image(file =","'", paste0('./Rexport/RData_sgev3_simulation/testloss_scenario',S_num, '.RData',"')"))))
rm(list=ls())
setwd("~/GITHUB/gev")
source("./lib/sgev3library.R")
source("./lib/pack.R")
S_num = 10
eval(parse(text = paste0("load(file =","'", paste0('./Rexport/RData_sgev3_simulation/result_scenario',S_num, '.RData',"')"))))
p=length(zlist[[1]])
df.1 = c()
df.2 = c()
df.3 = c()
for (i in 1:length(lam_set1)){
lam_s1 = lam_set1[i] ; lam_s2 = lam_set2[i] ; lam_s3 = lam_set3[i]
Hatmat1 = Z%*%solve(t(Z)%*%Z +lam_s1*Om+diag(1e-08,nrow(Om)))%*%t(Z)
Hatmat2 = Z%*%solve(t(Z)%*%Z +lam_s2*Om+diag(1e-08,nrow(Om)))%*%t(Z)
Hatmat3 = Z%*%solve(t(Z)%*%Z +lam_s3*Om+diag(1e-08,nrow(Om)))%*%t(Z)
df.1[i] =  sum(diag(Hatmat1))
df.2[i] =  sum(diag(Hatmat2))
df.3[i] =  sum(diag(Hatmat3))
}
DF = rowSums(as.matrix(expand.grid( df.1, df.2, df.3)))
nll_list = list()
for (i in 1:length(result)){
set.seed(i)
xlist = list()
for (s in 1:ns){
xlist[[s]] = rgev(n,loc=loc[s], scale=sc[s], shape=sh[s])
}
nll = c()
for (l in 1:length(result[[1]])){
tvec=result[[i]][[l]]
loc.vec.reg = tvec[3+(1:p)]
sc.vec.reg = tvec[(3+p)+(1:p)]
sh.vec.reg = tvec[(3+2*p)+(1:p)]
loc.vec = tvec[1] + drop(Z%*%loc.vec.reg)
sc.vec = exp(tvec[2] + drop(Z%*%sc.vec.reg))
sh.vec = tvec[3] + drop(Z%*%sh.vec.reg)
ll = 0
for (s in 1:length(xlist)){
ll = ll - sum(dgev(x=xlist[[s]],loc=loc.vec[s],scale=sc.vec[s],shape=sh.vec[s], log=TRUE))
}
nll[l] = ll
}
nll_list[[i]] = nll
}
AIC_list = lapply(nll_list,function(x) 2*x+2*DF)
lam.grid2 = expand.grid(lam_set1,lam_set2,lam_set3)
lam.min.table = table(unlist(lapply(AIC_list,function(x) which.min(x))))
lam.min.vec = as.numeric(rownames(lam.min.table))
lam.grid2[lam.min.vec,] # 선택된 lambda 범위
eval(parse(text = paste0("save.image(file =","'", paste0('./Rexport/RData_sgev3_simulation/AIC_scenario',S_num, '.RData',"')"))))
rm(list=ls())
setwd("~/GITHUB/gev")
source("./lib/sgev3library.R")
source("./lib/pack.R")
library(distrEx)
library(RobExtremes)
S_num = 1
eval(parse(text = paste0("load(file =","'", paste0('./Rexport/RData_sgev3_simulation/AIC_scenario',S_num, '.RData',"')"))))
# true paramter
loc = mu_set[,S_map[S_num,]$Var1]
sc =  sc_set[,S_map[S_num,]$Var2]
sh =  sh_set[,S_map[S_num,]$Var3]
Sys.time()
rmse_list = list()
hdist_list = list()
for (i in 1:length(result)){
rmse_vec = c()
hdist_vec = c()
for (l in 1:length(result[[1]])){
tvec=result[[i]][[l]]
loc.vec.reg = tvec[3+(1:p)]
sc.vec.reg = tvec[(3+p)+(1:p)]
sh.vec.reg = tvec[(3+2*p)+(1:p)]
loc.vec = tvec[1] + drop(Z%*%loc.vec.reg)
sc.vec = exp(tvec[2] + drop(Z%*%sc.vec.reg))
sh.vec = tvec[3] + drop(Z%*%sh.vec.reg)
h_dist = 0
for (s in 1:ns){
x = GEV(loc=loc[s],scale=sc[s],shape=sh[s]) # RobExtremes
y = GEV(loc=loc.vec[s],scale=sc.vec[s],shape=sh.vec[s])
h_dist = h_dist + HellingerDist(x,y,smooth) # distrEx
}
rmse_vec[l] = base::norm(c(loc,sc,sh)-c(loc.vec,sc.vec,sh.vec), "2")/sqrt(3*ns)
hdist_vec[l] = h_dist
}
rmse_list[[i]] = rmse_vec
hdist_list[[i]] = hdist_vec
cat(i," ")
}
rmse_mat = do.call('rbind',rmse_list)
hdist_mat = do.call('rbind',hdist_list)
eval(parse(text = paste0("save.image(file =","'", paste0('./Rexport/RData_sgev3_simulation/testloss_scenario',S_num, '.RData',"')"))))
