mu0=rnorm(1,0,0.01)
sigma0=runif(1,0,1)
k0=-sigma0/(min(x)-0.1-mu0)
GEVnewtonRaphson(theta0=c(mu0,sigma0,k0),alpha=0.02,maxiter=1000)
mu0=rnorm(1,0,0.01)
sigma0=runif(1,0,1)
k0=-sigma0/(min(x)-0.1-mu0)
GEVnewtonRaphson(theta0=c(mu0,sigma0,k0),alpha=0.02,maxiter=1000)
mu0=rnorm(1,0,0.01)
sigma0=runif(1,0,1)
k0=-sigma0/(min(x)-0.1-mu0)
GEVnewtonRaphson(theta0=c(mu0,sigma0,k0),alpha=0.02,maxiter=1000)
mu0=rnorm(1,0,0.01)
sigma0=runif(1,0,1)
k0=-sigma0/(min(x)-0.1-mu0)
GEVnewtonRaphson(theta0=c(mu0,sigma0,k0),alpha=0.02,maxiter=1000)
fgev(x)
rm(list=ls())
library("Deriv")
library("evd")
f=function(mu,sigma,k){
sum(log(sigma)+(1+1/k)*log(1+k*(x-mu)/sigma)+(1+k*(x-mu)/sigma)^(-1/k))
}
Jaco=Deriv(expression(f(mu,sigma,k)))
Hmat=Deriv(Jaco)
set.seed(141)
x=rgev(n=100,loc=0.13,scale=1.1,shape=0.4)
fgev(x)
GEVnewtonRaphson <- function (theta0, alpha=0.1, maxiter = 1000, tol = 1e-05) {
if ( !all(1+theta0[3]*(x-theta0[1])/theta0[2]>0) ){
warning("NaN produced in log by 'theta0'")
}
old_theta <- theta0
niter <- 0
alp <- seq(from=0,to=100,by=1)/100
for (i in 1:maxiter) {
niter = niter + 1
mu=old_theta[1]; sigma=old_theta[2]; k=old_theta[3]
jvec = eval(Jaco)
hess = eval(Hmat)
hmat = matrix(c(hess["mu.mu"],hess["mu.sigma"],hess["mu.k"],
hess["sigma.mu"],hess["sigma.sigma"],hess["sigma.k"],
hess["k.mu"],hess["k.sigma"],hess["k.k"]),3,3)
del_theta = solve(hmat,-alpha*jvec)
new_theta = old_theta + del_theta
if ( new_theta[2] < 0 ) {
alpha = min(alp[alp>(tol-old_theta[2])/del_theta[2]])
del_theta = solve(hmat,-alpha*jvec)
new_theta = old_theta + del_theta
}
if ( !all(1+new_theta[3]*(x-new_theta[1])/new_theta[2]>0) ) {
alpha = min(alp[(old_theta[3]+alp*del_theta[3])*(min(x)-(old_theta[1]-alp*del_theta[1])) > -new_theta[2]])
del_theta = solve(hmat,-alpha*jvec)
new_theta = old_theta + del_theta
}
if ( norm(as.matrix(del_theta)) < tol ) {    ### if (max(abs(del_theta)) < tol )
break
}
old_theta = new_theta
if (niter == maxiter) {
warning("Maximum number of iterations 'maxiter' was reached.")
}
}
return(list(initial = theta0, root = new_theta, step = niter, delta = del_theta))
}
x=rgev(n=100,loc=100,scale=40,shape=-0.1)
fgev(x)
set.seed(141)
x=rgev(n=100,loc=100,scale=40,shape=-0.1)
hist(x)
k0= -0.1
GEVnewtonRaphson(theta0=c(mu0,sigma0,k0),alpha=0.02,maxiter=1000)
mu0= 100
sigma0= 40
k0= -0.1
GEVnewtonRaphson(theta0=c(mu0,sigma0,k0),alpha=0.02,maxiter=1000)
fgev(x)
true.vec = c(100,40,0.1)
x=rgev(n=100,loc=true.vec[1] ,scale=true.vec[2],shape=true.vec[3])
true.vec = c(100,40,0.1)
x=rgev(n=100,loc=true.vec[1] ,scale=true.vec[2],shape=true.vec[3])
fgev(x)
true.vec = c(100,40,0.1)
x=rgev(n=100,loc=true.vec[1] ,scale=true.vec[2],shape=true.vec[3])
true.vec[1]
x=rgev(n=100,loc=true.vec[1] ,scale=true.vec[2],shape=true.vec[3])
fgev(x)
true.vec = c(100,40,0.1)
x=rgev(n=100,loc=true.vec[1] ,scale=true.vec[2],shape=true.vec[3])
fgev(x)
GEVnewtonRaphson(theta0=true.vec,alpha=0.02,maxiter=1000)
set.seed(141)
true.vec = c(1,30,0.1)
x=rgev(n=100,loc=true.vec[1] ,scale=true.vec[2],shape=true.vec[3])
GEVnewtonRaphson(theta0=true.vec,alpha=0.02,maxiter=1000)
set.seed(141)
true.vec = c(1,30,0.1)
x=rgev(n=100,loc=true.vec[1] ,scale=true.vec[2],shape=true.vec[3])
fgev(x)
GEVnewtonRaphson(theta0=true.vec,alpha=0.02,maxiter=1000)
true.vec = c(1,0.1,0.1)
x=rgev(n=100,loc=true.vec[1] ,scale=true.vec[2],shape=true.vec[3])
fgev(x)
GEVnewtonRaphson(theta0=true.vec,alpha=0.02,maxiter=1000)
jvec
p = 3
z = matrix(rnorm(p*n),n,p)
p = 3
set.seed(141)
true.vec = c(1,0.1,0.1)
n = 100
x=rgev(n,loc=true.vec[1] ,scale=true.vec[2],shape=true.vec[3])
x
p = 3
z = matrix(rnorm(p*n),n,p)
z
true.beta = c(1,0,0)
x + z%*%true.beta
true.vec = c(120,40,-0.1)
set.seed(141)
true.vec = c(120,40,-0.1)
n = 100
x=rgev(n,loc=true.vec[1] ,scale=true.vec[2],shape=true.vec[3])
p = 3
z = matrix(rnorm(p*n),n,p)
true.beta = c(1,0,0)
x + z%*%true.beta
set.seed(141)
n = 100
p = 3
true.vec = c(120,40,-0.1)
true.beta = c(1,0,0)
set.seed(141)
z = matrix(rnorm(p*n),n,p)
x=rgev(n,loc=true.vec[1] ,scale=true.vec[2],shape=true.vec[3]) + z%*%true.beta
x
fgev(x)
plot(x, z[,1])
true.beta = c(5,0,0)
set.seed(141)
z = matrix(rnorm(p*n),n,p)
x=rgev(n,loc=true.vec[1] ,scale=true.vec[2],shape=true.vec[3]) + z%*%true.beta
plot(x, z[,1])
plot(x, z[,2])
plot(x, z[,3])
cor(x, z[,1])
cor(x, z[,2])
cor(x, z[,3])
fgev(x)
GEVnewtonRaphson(theta0=true.vec,alpha=0.02,maxiter=1000)
Jaco
g=function(x,y) x+y
deriv(~f(x,x^2),x)
deriv(~g(x,x^2),x)
Jaco[1]
Jaco[["mu"]]
Jaco[["mu"]]
Deriv(f)
Deriv(~a+b*x, c("a", "b"))
Deriv(~(a+b*x-y)**2, c("a", "b"))
Deriv(~sum((rep(a,length(x))+b*x-y)**2, c("a", "b"),n=2)
)
f <- function(x) x^2
Deriv(f)
ex=expression(sum(log(sigma)+(1+1/k)*log(1+k*(x-mu)/sigma)+(1+k*(x-mu)/sigma)^(-1/k)))
ex
logll=expression(sum(log(sigma)+(1+1/k)*log(1+k*(x-mu)/sigma)+(1+k*(x-mu)/sigma)^(-1/k)))
Deriv(logll)
Jaco=Deriv(logll)
Jaco=Deriv(logll,c(mu,sigma,k))
logll=expression(sum(log(sigma)+(1+1/k)*log(1+k*(x-mu)/sigma)+(1+k*(x-mu)/sigma)^(-1/k)))
Jaco=Deriv(logll,c(mu,sigma,k))
Jaco=Deriv(logll,c(-mu,sigma,k))
Jaco=Deriv(logll
)
Jaco
Deriv(logll,c("mu","sigma","k"))
Jaco(logll,c("mu"))
Deriv(logll,c("mu"))
mu=10
x
eval(Jaco)
k=1
eval(Jaco)
sigma
mu=120
sigma=40
k=-0.1
eval(Jaco)
Deriv(logll,c("mu"))
eval(Deriv(logll,c("mu")))
add.deriv("cos","-sin(expr")
add.deriv("cos","-sin(expr)")
drule
x
y
z
?Drule
?drule
drule[["mu"]]
drule[["cos"]]
?alis
?alis
?alist
?expr
expr
chain.rule
chain.rule
chain.rule()
Jaco+c(1,2,3)
Jaco
c(Jaco,c(1,2,3))
drule[["as"]] <- alist(x="mus")
Deriv(expression="mus")
Deriv(expression="as")
Deriv(as)
Deriv(mus)
Deriv(mus,"x")
Deirv(as)
Deriv(as)
drule[["2x+3y"]] <- alist(x="z")
Deriv(z)
Deriv(expression=z)
Deriv(expression(z))
drule[[expression(2x+3y)]] <- alist(x="z")
drule[expression(2x+3y)] <- alist(x="z")
drule[[expression(2x+3y)]] <- alist(x="z")
drule$log
drule$z
# add custom entries to the derivarives table
sinpi <- function(x) sin(pi*x)
drule[["sinpi"]] <- alist(x=pi*cospi(x))
Deriv(sinpi)
x=2
eval(Deriv(sinpi))
eval(Deriv(sinpi,"x"))
drule[["sinpi"]] <- alist(x=pi*cos(x))
Deriv(sinpi)
x=2
pi=3
eval(Deriv(sinpi,"x"))
pi
phi
?pi
rm(list=ls())
library("Deriv")
# add custom entries to the derivarives table
sinpi <- function(x) sin(pi*x)
pi
drule[["sinpi"]] <- alist(x=pi*cos(x))
Deriv(sinpi)
x=2
eval(Deriv(sinpi,"x"))
logll=expression(sum(log(sigma)+(1+1/k)*log(1+k*(x-mu)/sigma)+(1+k*(x-mu)/sigma)^(-1/k)))
Deriv(logll,c("mu","sigma","k"),n=c(hessian=2))
Deriv(logll**2,c("mu","sigma","k"),n=c(hessian=2))
logl=expression(log(sigma)+(1+1/k)*log(1+k*(x-mu)/sigma)+(1+k*(x-mu)/sigma)^(-1/k))
Deriv(sum(logll**2),c("mu","sigma","k"),n=c(hessian=2))
logll=expression(sum(log(sigma)+(1+1/k)*log(1+k*(x-mu)/sigma)+(1+k*(x-mu)/sigma)^(-1/k)))
c("a", "b"), n=c(hessian=2)
producing just a constant 2 for double differentiation by a instead of expected result 2*length(x).
Deriv(Deriv(logll),c("mu","sigma","k"),n=c(hessian=2))
Deriv(Deriv(logll),c("mu","sigma","k"))
x=rgev(n,loc=true.vec[1] ,scale=true.vec[2],shape=true.vec[3]) + z%*%true.beta
true.vec = c(120,40,-0.1)
true.beta = c(5,0,0)
n = 100
p = 3
x=rgev(n,loc=true.vec[1] ,scale=true.vec[2],shape=true.vec[3]) + z%*%true.beta
z = matrix(rnorm(p*n),n,p)
x=rgev(n,loc=true.vec[1] ,scale=true.vec[2],shape=true.vec[3]) + z%*%true.beta
rm(list=ls())
library("evd")
library("Deriv")
mu=120
sigma=40
k=-0.1
x=rgev(n,loc=mu ,scale=sigma,shape=k)
n=100
x=rgev(n,loc=mu ,scale=sigma,shape=k)
logll=expression(sum(log(sigma)+(1+1/k)*log(1+k*(x-mu)/sigma)+(1+k*(x-mu)/sigma)^(-1/k)))
Deriv(Deriv(logll),c("mu","sigma","k"))
Hess=Deriv(Deriv(logll),c("mu","sigma","k"))
eval(Hess)
Hess=Deriv(Deriv(logll),c("mu","sigma","k"),n=c(hessian=2))
eval(Hess)
Hess=Deriv(logll,c("mu","sigma","k"),n=c(hessian=2))
eval(Hess)
Deriv(a+b*x,c("a","b"))
Deriv(~a+b*x,c("a","b"))
Deriv(~a+b*x,c("a","b"),comvine="cbind")
Deriv(~a+b*x,c("a","b"),combine="cbind")
Jaco=Deriv(logll,c("mu","sigma","k"))
Jaco
c(Jaco,beta)
c(Jaco,c(1,2,3))
c(Jaco,Deriv(logll,mu))
Deriv(logll,mu)
Deriv(logll,"mu")
z = matrix(rnorm(p*n),n,p)
n=100
p = 3
set.seed(141)
z = matrix(rnorm(p*n),n,p)
apply(z,sum,2)
apply(z,2,sum)
apply(z,1,sum)
c(Jaco,Deriv(logll,"mu")*apply(z,2,sum))
c(Jaco,Deriv(logll,"mu") %*% apply(z,2,sum))
apply(z,2,sum)
Deriv(logll,"mu")
is.vector(Deriv(logll,"mu"))
Deriv(logll,"mu")
Deriv(logll,"mu") * apply(z,2,sum)
c(Deriv(logll,"mu")) * apply(z,2,sum)
c(Jaco,c(1,2,3))
Jaco
Deriv(logll,"mu")
Jaco=Deriv(logll,c("mu","sigma","k"))
p = 2
z = matrix(rnorm(p*n),n,p)
z
Jaco
c(Jaco,c(1,2,3))
d(0)
matplot(x,cbind(y,funky(x)),type="pl",ylab="y",pch=20,lty=1,col=1)
funky <- function(x) sin(2*pi*x^3)^3
x <- seq(0,1,by=0.01)
y <- funky(x) + 0.1 * rnorm(101)
matplot(x,cbind(y,funky(x)),type="pl",ylab="y",pch=20,lty=1,col=1)
matplot(x,cbind(y,g4$fit),type="pll",ylab="y",pch=20,lty=1,col=1)
g4 <- lm (y~poly(x,12))
matplot(x,cbind(y,g4$fit),type="pll",ylab="y",pch=20,lty=1,col=1)
funky <- function(x) sin(2*pi*x^3)^3
x <- seq(0,1,by=0.01)
y <- funky(x) + 0.1 * rnorm(101)
matplot(x,cbind(y,funky(x)),type="pl",ylab="y",pch=20,lty=1,col=1)
g4 <- lm (y~poly(x,12))
matplot(x,cbind(y,g4$fit),type="pll",ylab="y",pch=20,lty=1,col=1)
par(mfrow=c(1,2))
matplot(x,cbind(y,funky(x)),type="pl",ylab="y",pch=20,lty=1,col=1)
matplot(x,cbind(y,g4$fit),type="pll",ylab="y",pch=20,lty=1,col=1)
?bs
bs
install.packages("fds")
?fds
head(fds)
library("fds")
head(fds)
?fds
data <- montreal_temp_1
data <- montreal_temp_1.R.
load("montreal_temp_1.R")
head(Electricitydemand)
head(mondaydemand)
head(fds)
detach("fds")
fda
install.packages("fda")
library("fda")
head(fda)
head(fda)
?fda
scriptsDir <- system.file('scripts', package='fda')
girlGrowthSm
data
montreal_temp_3.$
montreal_temp_3.R
montreal_temp_3.R
montreal_temp_3
montreal_temp
load("fda")
fd
MonteralTemp
data <- data(MontrealTemp)
head(data)
data(MontrealTemp)
head(MontrealTemp)
rm(list=ls())
library("fda")
data(MontrealTemp)
X <- cbind(outer(data$x,1:D,"^"),
outer(data$x,knots,">") * outer(data$x,knots,"-")^D)
data$x
data
data(MontrealTemp)
MontrealTemp
data<-MontrealTemp
head(data)
data1<-data[1,]
data1
data$x
dim(data)
data1<-cbind(data[1,],data[2,])
dim(data1)
y<-rbind(data[1,],data[2,])
dim(y)
dy
y
x
data
dim(data)
head(data)
data[1,]
data[2,]
dim(data[1,])
dim(data1[1,])
d1<-data[1,]
dim(d1)
x<-cbind(data[1,],data[2,])
dim(x)
x<-c(data[1,],data[2,])
y<-c(data[1,],data[2,])
365*2
x<-c(1:730)
plot(x,y)
X <- cbind(outer(x,1:D,"^"),
outer(x,knots,">") * outer(x,knots,"-")^D)
637/73
73*c(1:9)
knots<-73*c(1:9)
X <- cbind(outer(x,1:D,"^"),
outer(x,knots,">") * outer(x,knots,"-")^D)
x
outer(x,1:D,"^")
D=3
X <- cbind(outer(x,1:D,"^"),outer(x,knots,">") * outer(x,knots,"-")^D)
lm(y~X-1)
splins <-lm(y~X-1)
plot(splins$fitted.values,x)
plot(x,splins$fitted.values)
plot(x,y)
splins <-lm(y~X)
plot(x,splins$fitted.values)
sp1 <-lm(y~X)
plot(sp1)
plot(sp1[1])
plot(sp1,1)
plot(sp1,2)
plot(sp1,3)
plot(sp1,4)
plot(sp1,5)
plot(sp1,6)
plot(sp1,7)
plot(x,sp1$fitted.values
)
X2 <- bs(x,knots=knots,degree=D,intercept=TRUE)
sp2 <- lm(y~X2-1)
plot(x,sp2$fitted.values)
plot(x,y)
max(x)
730/10
730/5
knots<-146*c(1:5)
knots
X <- cbind(outer(x,1:D,"^"),outer(x,knots,">") * outer(x,knots,"-")^D)
X2 <- bs(x,knots=knots,degree=D,intercept=TRUE)
sp2 <- lm(y~X2-1)
plot(x,sp2$fitted.values)
knots
knots<-c(146,220,380,480,610)
X2 <- bs(x,knots=knots,degree=D,intercept=TRUE)
sp2 <- lm(y~X2-1)
plot(x,sp2$fitted.values)
X <- cbind(outer(x,1:D,"^"),outer(x,knots,">") * outer(x,knots,"-")^D)
sp1 <-lm(y~X)
plot(x,sp1$fitted.values)
?plot
plot(x,sp2$fitted.values,lty=l)
plot(x,sp2$fitted.values,type="l)
plot(x,sp2$fitted.values,type="l")
plot(x,sp2$fitted.values,type="l")
outer(x,1:D,"^")
par(mfrow=c(1,2))
par(mfrow=c(1,2))
plot(x,y)
plot(x,sp1$fitted.values,type="l",col="red")
line(x,sp1$fitted.values,type="l",col="red")
lines(x,sp1$fitted.values,type="l",col="red")
par(mfrow=c(1,2))
plot(x,y)
lines(x,sp1$fitted.values,type="l",col="red")
plot(x,y)
lines(x,sp2$fitted.values,type="l",col="red")
?plot
plot(x,y,main=cubic spline with 5 knots)
lines(x,sp1$fitted.values,type="l",col="red",lwd = 5)
plot(x,y,main="B splines with 5 knots")
lines(x,sp2$fitted.values,type="l",col="red",lwd = 2)
knots<-c(146,220,380,480,610)
X2 <- bs(x,knots=knots,degree=3,intercept=TRUE)
X1 <- cbind(outer(x,1:3,"^"),outer(x,knots,">") * outer(x,knots,"-")^D)
sp2 <- lm(y~X2-1)
plot(x,sp2$fitted.values,type="l")
sp1 <-lm(y~X1)
plot(x,sp1$fitted.values)
par(mfrow=c(1,2))
plot(x,y,main="cubic spline with 5 knots")
plot(x,y,main="B splines with 5 knots")
lines(x,sp1$fitted.values,type="l",col="red",lwd = 2)
lines(x,sp2$fitted.values,type="l",col="red",lwd = 2)
par(mfrow=c(1,2))
plot(x,y,main="cubic spline with 5 knots")
lines(x,sp1$fitted.values,type="l",col="red",lwd = 2)
plot(x,y,main="B splines with 5 knots")
lines(x,sp2$fitted.values,type="l",col="red",lwd = 2)
kma<-load("C:\\Users\\uos\\서울시립대학교\\전종준 - lab_work\\Lab_process\\KEY\\kma_data\\data_kr.R")
rm(list=ls())
kma<-load("C:\\Users\\uos\\서울시립대학교\\전종준 - lab_work\\Lab_process\\KEY\\kma_data\\data_kr.R")
head(kma)
setwd("C:\\Users\\uos\\서울시립대학교\\전종준 - lab_work\\Lab_process\\KEY\\kma_data")
data1<-read.csv("2010-2018.csv")
